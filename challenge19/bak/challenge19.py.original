import sys;
import fileinput;
from base64 import b64decode,b64encode;
import binascii


def bin2hex(b):
	s = '';
	for i in xrange(len(b)/4):
		s+= hex(int(b[i*4:(i+1)*4],2))[2:];
	return s;

def hex2bin(h):
	s = '';
	for i in xrange(len(h)):
		s+= bin(int(h[i],16))[2:].zfill(4);
	return s;


def main():
	inputs = '';
	for line in sys.stdin:
		inputs+=line.strip();
		
	outputs = '';
	for line in fileinput.input('sample_output'):
		outputs+=line.strip();
	outputs+='==';
		
	ihex = b64decode(inputs);
	ibin = hex2bin(ihex);
	ohex = b64decode(outputs);
	obin = hex2bin(ohex);
	
#	print ibin;
#	
	numbers = [int('0'+v.strip(),2) for v in ibin.replace('10111100011110011111000', ' ').split(' ')][1:];
#	
#	

	ibinc = ibin.replace('10111100011110011111000', '\033[90m10111100011110011111000\033[0m');
	obinc = obin.replace('110111100011110011111000', '\n1\033[90m10111100011110011111000\033[0m');		
	
	result = dict();
	obinclines = obinc.split('\n')[1:];
	obincparsed = '';
	fix = '1\033[90m10111100011110011111000\033[0m';
	for line in obinclines:
		p = '   ';
		l = line.replace('1\033[90m10111100011110011111000\033[0m', '');
		num = l[:9];
		result[num]=[num];
		l = l[9:];
		i = 0;
		while (i < (len(l)/6)):
			result[num]+=[l[i*6:(i+1)*6]];
			i+=1;
		if (l[(i)*6:]):
			result[num] += [l[(i)*6:]];
	
#	
#	
	lastnum = 0;
	processednumbers = {0:['100000011']};
	for i in range(len(numbers)-1):
		if (abs(numbers[i]-numbers[i+1]) > int('10000', 2) or -int('10000',2) == numbers[i]-numbers[i+1]):
			lastnum +=1;
			processednumbers[lastnum]=[bin(numbers[i+1])[2:].zfill(9)];
		else:
			processednumbers[lastnum]+=[bin(numbers[i+1])[2:].zfill(9)];
			
	output = '';
	for num in processednumbers:		
		output += '\033[94m';
		for i,enigma in enumerate(result[processednumbers[num][0]]):
			output += enigma+' ';
		output+= '\033[0m\n';
		for i in range(len(processednumbers[num])-1):
			intrest =int(processednumbers[num][i],2)-int(processednumbers[num][i+1],2);
			rest = bin(intrest)[2:] if intrest > 0 else '-'+bin(intrest)[3:]
			output += '\033[91m'+processednumbers[num][i] + '\033[0m -> ' + rest + ' -> \033[91m';
		output += processednumbers[num][len(processednumbers[num])-1];
		output += '\033[0m\n';
		output += '\n';
	# Esto es lo que he utilizado para descodificar el sample, 
	# descomenta si quieres verlo
#	print output;
	
	
	#
	# Este es el algoritmo en si
	# 
	diffSize = 6;
	bin10000 = pow(2,diffSize-2);		
	lastWord = ibin[:32];
	lastWordValue = int(lastWord,2);
	compressed = '1'+lastWord;
	for pos in xrange(1,len(ibin)/32):
		word = ibin[32*pos:32*(pos+1)];
		wordValue = int(word,2);
		intDiff = lastWordValue-wordValue;
		if (abs(intDiff) > bin10000 or -bin10000 == intDiff):
			compressed += '1'+word;
#			print pos,": adding word ",word, " because the difference is ",intDiff
			lastWord = word;
			lastWordValue = wordValue;
		else:
			if (intDiff<=0):
				diff = bin(abs(intDiff))[2:];
				# 0 stands for "continue"
				# 0 stands for negative difference
				diffString = '00'+diff.zfill(diffSize-2);
				compressed+=diffString;
#				print pos, ": adding negdiff: ",diffString, ' (word ',word,')'
				lastWord = word;
				lastWordValue = wordValue;
			else:
				diff = bin(bin10000-intDiff)[2:];
				# 0 stands for "continue";
				# 1 stands for positive difference
				diffString = '01'+diff.zfill(diffSize-2);
				compressed+=diffString;		
#				print pos,": adding posdiff: ",diffString, ' (word ',word,')'
				lastWord = word;
				lastWordValue = wordValue;
	final = compressed+'00';	
#	print len(final);
#	print len(final)%4;

#	print ibinc	
#	print obinc;
#		

	# Esto comprueba que el resultado coincida bit a bit con el sample_output
#	print final;
#	print obin;
#	ok = '';
#	for i,c in enumerate(obin):
#		if (final[i]==obin[i]):
#			ok+=c;
#		else:
#			print "error at ",i,"that is ",final[i]," and must be ",obin[i];
#			break;
#	print final;
	finalhex = bin2hex(final);
	finalb64 = b64encode(finalhex);
	print finalb64.replace('=','');
#	Y esto es para comprobar que la solucion base64 es igual a la sample
#	print finalb64.replace('=','') == outputs.replace('=','');
#	print outputs;
	
	
	
#	print finalhex;
#	print ohex;
			
			
			
if __name__ == '__main__':
	main();
