import sys;
import md5;
from itertools import groupby;
from multiprocessing import Process, Queue;
from operator import itemgetter;


class Transformation:
	def __init__(self,s):
		self.l = []
		for c in s:
			self.l += [[c,1]]

def main():
	maxQueueStringSize = 1024*1024;
	maxProcesses = 8;
	
	queueString = sys.stdin.next().strip();
	queueLength = len(queueString);
	queueList = [queueString[i*maxQueueStringSize:min(queueLength,(i+1)*maxQueueStringSize)] for i in range(queueLength/maxQueueStringSize+1)];
#	print "queue:",queueString;
	adjustments = [];
	for line in sys.stdin:
		parsed = line.strip().split(',');
		transformations = dict();
		for transformation in parsed:
			splitted = transformation.split('=>');
			transformations[splitted[0]] = splitted[1];
		adjustments.append(transformations);
	
	hasher = md5.new();
	s = [queueString]+['']*len(adjustments);
	
	i = 0;
	count = 0;
	lastc = 0;
	while True:		
		if (len(s[i]) == 0):
#			print "no more chars on line",i
			i=i+1;
		else:
			# If there are no more adjustments,process the char
			if (i>=len(adjustments)):
#				print s,s[i][0],type(s[i][0]);
				hasher.update(s[i]);
				count += len(s[i]);
				if (count / 1000000 > lastc):
					lastc = count/1000000;
					f = open('out','a');
					f.write(str(count)+" "+str(len(s[0]))+" "+str(sum([len(v) for v in s]))+'\n');
					f.close();
				s[i] = '';
#				if (sum([len(v) for v in s]) == 0):
#					break;
				i = 0;
			# There are more levels
			else:
				# If there are characters on the next line, we don't need to add more
				# We don't even want to have two characters, because it would need the concatenation operation
				if(len(s[i+1]) > 0):
#					print "No more chars needed on the line ",i+1;
					i=i+1;
				else:
					# We need more chars, this is the case if there's a rule for it
					try:
						s[i+1] = adjustments[i][s[i][0]];
						s[i] = s[i][1:];
						i=i+1;
					# There is no rule for it
					except:
						s[i+1] = s[i][0];
						s[i] = s[i][1:];
						i=i+1;
			
	print hasher.hexdigest();
		
		
		
if __name__ == '__main__':
	main();
